[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.12.9","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://www.softrbezzee.cn\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","blog",["Map",9,10,21,22,48,49,71,72,88,89,111,112,164,165],"usin-mdx",{"id":9,"data":11,"body":16,"filePath":17,"digest":18,"legacyId":19,"deferredRender":20},{"title":12,"description":13,"pubDate":14,"heroImage":15},"Using MDX","Lorem ipsum dolor sit amet",["Date","2022-08-08T00:00:00.000Z"],"/blog-placeholder-5.jpg","This theme comes with the [@astrojs/mdx](https://docs.astro.build/en/guides/integrations-guide/mdx/) integration installed and configured in your `astro.config.mjs` config file. If you prefer not to use MDX, you can disable support by removing the integration from your config file.\n\n## Why MDX?\n\nMDX is a special flavor of Markdown that supports embedded JavaScript & JSX syntax. This unlocks the ability to [mix JavaScript and UI Components into your Markdown content](https://docs.astro.build/en/guides/markdown-content/#mdx-features) for things like interactive charts or alerts.\n\nIf you have existing content authored in MDX, this integration will hopefully make migrating to Astro a breeze.\n\n## Example\n\nHere is how you import and use a UI component inside of MDX.  \nWhen you open this page in the browser, you should see the clickable button below.\n\nimport HeaderLink from '../../components/HeaderLink.astro';\n\n\u003CHeaderLink href=\"#\" onclick=\"alert('clicked!')\">\n\tEmbedded component in MDX\n\u003C/HeaderLink>\n\n## More Links\n\n- [MDX Syntax Documentation](https://mdxjs.com/docs/what-is-mdx)\n- [Astro Usage Documentation](https://docs.astro.build/en/guides/markdown-content/#markdown-and-mdx-pages)\n- **Note:** [Client Directives](https://docs.astro.build/en/reference/directives-reference/#client-directives) are still required to create interactive components. Otherwise, all components in your MDX will render as static HTML (no JavaScript) by default.","src/content/blog/usin-mdx.mdx","46e2536b63c5ff92","usin-mdx.mdx",true,"post-3",{"id":21,"data":23,"body":37,"filePath":38,"digest":39,"rendered":40,"legacyId":47},{"title":24,"author":25,"description":26,"image":27,"heroImage":30,"pubDate":31,"tags":32},"我的第三篇博客文章","Astro 学习者","我遇到了一些问题，但是在社区里面提问真的很有帮助！",{"url":28,"alt":29},"https://docs.astro.build/assets/rays.webp","The Astro logo on a dark background with rainbow rays.","/blog-placeholder-2.jpg",["Date","2022-07-15T00:00:00.000Z"],[33,34,35,36],"astro","learning in public","setbacks","community","尽管这并不总是一帆风顺，但我很享受使用 Astro 进行搭建。并且，[Discord 社区](https://astro.build/chat)真的很友好而且乐于助人！","src/content/blog/post-3.md","52db3f8b1a43552d",{"html":41,"metadata":42},"\u003Cp>尽管这并不总是一帆风顺，但我很享受使用 Astro 进行搭建。并且，\u003Ca href=\"https://astro.build/chat\">Discord 社区\u003C/a>真的很友好而且乐于助人！\u003C/p>",{"headings":43,"localImagePaths":44,"remoteImagePaths":45,"frontmatter":23,"imagePaths":46},[],[],[],[],"post-3.md","post-4",{"id":48,"data":50,"body":60,"filePath":61,"digest":62,"rendered":63,"legacyId":70},{"title":51,"author":25,"description":52,"image":53,"heroImage":56,"pubDate":57,"tags":58},"我的第四篇博客文章这篇文章会自己出现在列表中这篇文章会自己出现在列表中这篇文章会自己出现在列表中","这篇文章会自己出现在列表中！",{"url":54,"alt":55},"https://docs.astro.build/default-og-image.png","The word astro against an illustration of planets and stars.","/blog-placeholder-3.jpg",["Date","2022-08-08T00:00:00.000Z"],[33,59],"successes","这篇文章应该会与其他的博客文章一起显示，因为 `import.meta.glob()` 会返回一个包含所有文章的列表，以创建这个文章列表。","src/content/blog/post-4.md","689598aad629abd1",{"html":64,"metadata":65},"\u003Cp>这篇文章应该会与其他的博客文章一起显示，因为 \u003Ccode>import.meta.glob()\u003C/code> 会返回一个包含所有文章的列表，以创建这个文章列表。\u003C/p>",{"headings":66,"localImagePaths":67,"remoteImagePaths":68,"frontmatter":50,"imagePaths":69},[],[],[],[],"post-4.md","post-5",{"id":71,"data":73,"body":60,"filePath":79,"digest":80,"rendered":81,"legacyId":87},{"title":74,"author":25,"description":52,"image":75,"heroImage":76,"pubDate":77,"tags":78},"xxxxxx",{"url":54,"alt":55},"/blog-placeholder-4.jpg",["Date","2022-08-09T00:00:00.000Z"],[33,59],"src/content/blog/post-5.md","d7de73cca0dd7839",{"html":64,"metadata":82},{"headings":83,"localImagePaths":84,"remoteImagePaths":85,"frontmatter":73,"imagePaths":86},[],[],[],[],"post-5.md","post-2",{"id":88,"data":90,"body":100,"filePath":101,"digest":102,"rendered":103,"legacyId":110},{"title":91,"author":25,"description":92,"image":93,"heroImage":96,"pubDate":97,"tags":98},"我的第二篇博客文章","学习了一些 Astro 后，我根本停不下来！",{"url":94,"alt":95},"https://docs.astro.build/assets/arc.webp","The Astro logo on a dark background with a purple gradient arc.","/blog-placeholder-1.jpg",["Date","2022-07-08T00:00:00.000Z"],[33,99,34,59],"blogging","在学习 Astro 大约一周后，我决定尝试些新的东西。我编写并导入了一个小组件！\n\n```mermaid\n  graph LR\n  Producer -->|发布消息| Topic\n  Topic -->|分成多个| Partition\n  Partition -->|被订阅| Consumer\n  Consumer -->|归属于| ConsumerGroup\n```","src/content/blog/post-2.md","d0d8ea1644e5132b",{"html":104,"metadata":105},"\u003Cp>在学习 Astro 大约一周后，我决定尝试些新的东西。我编写并导入了一个小组件！\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  graph LR\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Producer -->|发布消息| Topic\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Topic -->|分成多个| Partition\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Partition -->|被订阅| Consumer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Consumer -->|归属于| ConsumerGroup\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":106,"localImagePaths":107,"remoteImagePaths":108,"frontmatter":90,"imagePaths":109},[],[],[],[],"post-2.md","如何在-astro-项目中进行-react-组件的通信",{"id":111,"data":113,"body":124,"filePath":125,"digest":126,"rendered":127,"legacyId":163},{"title":114,"pubDate":115,"description":116,"author":117,"image":118,"heroImage":119,"tags":121},"如何在 Astro 项目中进行 React 组件的通信",["Date","2025-03-24T00:00:00.000Z"],"","奇迹大陆博客搭配师",{"url":119,"alt":120},"https://docs.astro.build/assets/rose.webp","The Astro logo on a dark background with a pink glow.",[33,122,123],"react","tech","# 引子\n最近打算构建一个个人播客，搜索了些市面上的开箱即用的博客，感觉都不太满意。于是打算借助 AI，使用 Astro 来自己实现整体的页面构建。使用 Astro 的好处就是，构建简单，并且可以集成 React 等框架组件。因为之前在字节写过一点 React，正好可以捡起来用。通过这篇文章，整体梳理一下这个框架之下，组件之间要如何进行数据的交互。\n\n# React架构下的组件交互\n在完全以 React 组件构建的项目中，组件之间根据关系，有不同的通信实现：\n\n## 父子组件\n- 父组件向子组件传递参数：通过 props 属性传递。将需要传递的参数封装在 props，当父组件某个状态变量发生改变时，通过 props 传递，将变化同步给子组件。\n- 子组件向父组件传递参数：通过 props 属性传递一个回调函数。在父组件内定义一个函数，通过 props 将函数传递给子组件。当子组件内某个状态变量发生改变时，调用通过 props 传入的函数。父组件在函数内调用 setState ，来实现变化的同步。\n```js\n// 父组件\nfunction Parent() {\n  const [count, setCount] = useState(0);\n\n  return \u003CChild count={count} onUpdate={v => setCount(v)} />\n}\n\n// 子组件\nfunction Child({ count, onUpdate }) {\n  return (\n    \u003Cdiv>\n      \u003Cp>当前计数：{count}\u003C/p>\n      \u003Cbutton onClick={() => onUpdate(count + 1)}>增加\u003C/button>\n    \u003C/div>\n  );\n}\n```\n\n## 兄弟组件\n- 状态提升：两个组件之间没有直接的调用关系，将状态变量定义在父组件中。当子组件 A 发生变化时，首先通过上述**子组件向父组件传递参数**的方式，完成子组件 A 的传递。然后通过**父组件向子组件传递参数**的方式，完成父组件到子组件 B 的传递。从而实现子组件 A 到子组件 B 的参数传递。\n```js\nfunction Parent() {\n  const [data, setData] = useState('');\n\n  return (\n    \u003C>\n      \u003CSender onSend={setData} />\n      \u003CReceiver data={data} />\n    \u003C/>\n  );\n}\n```\n\n## 跨级组件\n- **Context API**：Context提供了一种在组件树中传递数据的方法，无需逐层传递 props。通过`React.createContext()` 创建一个Context对象，在父组件中使用 Provider 提供数据，子组件中使用 Consumer 或 useContext Hook来获取数据。\n```js\n// Context创建\nconst DataContext = createContext();\n\nfunction App() {\n  return (\n    \u003CDataContext.Provider value={{ data: '全局数据' }}>\n      \u003CDeepComponent />\n    \u003C/DataContext.Provider>\n  );\n}\n\n// 深层子组件\nfunction DeepComponent() {\n  const { data } = useContext(DataContext);\n  return \u003Cdiv>{data}\u003C/div>;\n}\n```\n\n## 非关系组件\n- **使用状态管理库（如Redux）**：Redux等状态管理库提供了一个全局的状态存储，任何组件都可以通过连接到这个存储来读取和更新状态，从而实现组件间的通信。\n- **状态管理库（Zustand）**：基于 Hooks 的状态管理库，与 React 紧密集成。允许在组件中使用类似 useState 的 API 创建和管理状态。无需单独的 Store，每个状态都是独立的 Hook，管理更灵活\n- **使用事件总线（Event Bus）**：创建一个全局的事件中心，组件可以通过发布和订阅事件来进行通信。这种方法适用于组件之间关系复杂且不需要共享状态的场景。\n\n## 其他关系\n- **使用refs**：父组件可以通过refs直接访问子组件的实例，并调用其方法或访问其属性。这种方法通常用于需要直接控制子组件行为的场景。\n\n# Astro-React 混合架构下的组件交互\n回到我们的 Astro 的项目上来说，会稍微复杂一点。Astro 组件主要是静态的，它们是**纯 HTML、无需客户端运行**的模板组件。这点非常重要，Astro 组件会在构建打包时直接构建为 HTML，不会在客户端进行渲染。这也是 Astro 快的原因。\n\n在这过程中，frontmatter 中编写的 js 代码只会在构建的时候执行一次，构建完成则不会保留。如果需要客户端执行 js 交互，可以通过`\u003Cscript>\u003C/script>`来保留 js 代码或者通过`client: load`激活别的 UI 框架组件，例如 react。\n\n所以如果在 Astro 组件中引入 React 组件时，除了在构建时，执行 frontmatter 中 js 可以完成一次从 Astro 组件到 React 组件的参数传递之外，在客户端上进行交互，可以通过以下的方式（我们以点击右面 tag 列表中的 tag，触发左面 blog 列表重新加载为例）：\n\n## React 组件封装\n因为 Astro 组件在客户端是纯 Html 的状态。可以将所有具有交互功能的组件，都封装为 React 组件。 Astro 组件只用做页面布置，引入 React 组件。**注意 React 组件中不能引入 Astro 组件**。\n- 封装触发组件\n```js\nimport { useState } from 'react';\n\nconst TriggerComp = () => {\n\n  return (\n    \u003Cdiv>\n      \u003Cbutton>Tech\u003C/button>\n      \u003Cbutton>Design\u003C/button>\n    \u003C/div>\n  );\n};\n\nexport default TriggerComp;\n```\n\n- 定义响应组件\n```js\nimport React, { useEffect } from \"react\";  \n\nconst ResponseComp = () => {\n  const [blogs, setBlogs] = useState([\"blog1\", \"blog2\"]);\n  return (\n    \u003Cdiv>\n      {blogs.map((blog) => (\n        \u003Cdiv key={blog.id}>{blog.title}\u003C/div>\n      ))}\n    \u003C/div>\n  );\n};\n\nexport default ResponseComp;\n```\n\n## 使用 Zustand 全局状态管理（推荐）\n- 安装 Zustand\n```bash\n\tnpm install zustand\n```\n\n- 创建全局状态文件 `src/stores/tagStore.ts`\n```js\n//创建全局状态文件 `src/stores/tagStore.ts`\nimport { create } from 'zustand';\n\ninterface TagState {\n  selectedTag: string;\n  setSelectedTag: (tag: string) => void;\n}\n\nexport const useTagStore = create\u003CTagState>((set) => ({\n  selectedTag: 'all',\n  setSelectedTag: (tag) => set({ selectedTag: tag }),\n}));\n```\n\n- 修改触发组件\n```tsx\nimport { useTagStore } from '../stores/tagStore';\n\nconst TriggerComp = () => {\n  const setSelectedTag = useTagStore((state) => state.setSelectedTag);\n\n  return (\n    \u003Cdiv>\n      \u003Cbutton onClick={() => setSelectedTag('tech')}>Tech\u003C/button>\n      \u003Cbutton onClick={() => setSelectedTag('design')}>Design\u003C/button>\n    \u003C/div>\n  );\n};\n\nexport default TriggerComp;\n```\n\n- 修改响应组件\n```tsx\nimport { useEffect, useState } from 'react';\nimport { useTagStore } from '../stores/tagStore';\nimport { fetchBlogsByTag } from '../api'; // 假设有数据获取函数\n\nconst ResponseComp = () => {\n  const selectedTag = useTagStore((state) => state.selectedTag);\n  const [blogs, setBlogs] = useState([]);\n\n  useEffect(() => {\n    // 根据标签获取数据\n    fetchBlogsByTag(selectedTag).then((data) => setBlogs(data));\n  }, [selectedTag]);\n\n  return (\n    \u003Cdiv>\n      {blogs.map((blog) => (\n        \u003Cdiv key={blog.id}>{blog.title}\u003C/div>\n      ))}\n    \u003C/div>\n  );\n};\n\nexport default ResponseComp;\n```\n\n- 在 Astro 页面中引入组件\n```js\n---\nimport BlogList from '../components/BlogList';\nimport BlogListTags from '../components/BlogListTags';\n---\n\n\u003Chtml>\n  \u003Cbody>\n    \u003C!-- 启用客户端交互，实现TriggerComp数据传递到ResponseComp -->\n    \u003CTriggerComp client:load />\n    \u003CResponseComp client:load />\n  \u003C/body>\n\u003C/html>\n```\n\n## 使用自定义事件（无需外部库）：\n- 修改触发组件\n```tsx\nconst TriggerComp = () => {\n  const handleTagSelect = (tag: string) => {\n    // 通过浏览器原生事件系统实现组件通信。\n    // 触发自定义事件\n    const event = new CustomEvent('tagChange', { detail: tag });\n    window.dispatchEvent(event);\n  };\n\n  return (\n    \u003Cdiv>\n      \u003Cbutton onClick={() => handleTagSelect('tech')}>Tech\u003C/button>\n      \u003Cbutton onClick={() => handleTagSelect('design')}>Design\u003C/button>\n    \u003C/div>\n  );\n};\n\nexport default TriggerComp;\n```\n\n- 修改响应组件\n```tsx\nimport { useEffect, useState } from 'react';\nimport { fetchBlogsByTag } from '../api';\n\nconst ResponseComp = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [selectedTag, setSelectedTag] = useState('all');\n\n  useEffect(() => {\n    // 监听自定义事件\n    const handleTagChange = (e: CustomEvent) => {\n      setSelectedTag(e.detail);\n    };\n\n    window.addEventListener('tagChange', handleTagChange);\n    return () => window.removeEventListener('tagChange', handleTagChange);\n  }, []);\n\n  useEffect(() => {\n    // 根据标签获取数据\n    fetchBlogsByTag(selectedTag).then((data) => setBlogs(data));\n  }, [selectedTag]);\n\n  return (\n    \u003Cdiv>\n      {blogs.map((blog) => (\n        \u003Cdiv key={blog.id}>{blog.title}\u003C/div>\n      ))}\n    \u003C/div>\n  );\n};\n\nexport default ResponseComp;\n```\n\n- 在 Astro 页面中引入组件（同上）\n```js\n---\nimport BlogList from '../components/BlogList';\nimport BlogListTags from '../components/BlogListTags';\n---\n\n\u003Chtml>\n  \u003Cbody>\n    \u003CBlogListTags client:load />\n    \u003CBlogList client:load />\n  \u003C/body>\n\u003C/html>\n```","src/content/blog/如何在 Astro 项目中进行 React 组件的通信.md","f1e84d31a25a1a72",{"html":128,"metadata":129},"\u003Ch1 id=\"引子\">引子\u003C/h1>\n\u003Cp>最近打算构建一个个人播客，搜索了些市面上的开箱即用的博客，感觉都不太满意。于是打算借助 AI，使用 Astro 来自己实现整体的页面构建。使用 Astro 的好处就是，构建简单，并且可以集成 React 等框架组件。因为之前在字节写过一点 React，正好可以捡起来用。通过这篇文章，整体梳理一下这个框架之下，组件之间要如何进行数据的交互。\u003C/p>\n\u003Ch1 id=\"react架构下的组件交互\">React架构下的组件交互\u003C/h1>\n\u003Cp>在完全以 React 组件构建的项目中，组件之间根据关系，有不同的通信实现：\u003C/p>\n\u003Ch2 id=\"父子组件\">父子组件\u003C/h2>\n\u003Cul>\n\u003Cli>父组件向子组件传递参数：通过 props 属性传递。将需要传递的参数封装在 props，当父组件某个状态变量发生改变时，通过 props 传递，将变化同步给子组件。\u003C/li>\n\u003Cli>子组件向父组件传递参数：通过 props 属性传递一个回调函数。在父组件内定义一个函数，通过 props 将函数传递给子组件。当子组件内某个状态变量发生改变时，调用通过 props 传入的函数。父组件在函数内调用 setState ，来实现变化的同步。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 父组件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Parent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Child\u003C/span>\u003Cspan style=\"color:#B392F0\"> count\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{count} \u003C/span>\u003Cspan style=\"color:#B392F0\">onUpdate\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">v\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(v)} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 子组件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Child\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">onUpdate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>当前计数：{count}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> onUpdate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>增加&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"兄弟组件\">兄弟组件\u003C/h2>\n\u003Cul>\n\u003Cli>状态提升：两个组件之间没有直接的调用关系，将状态变量定义在父组件中。当子组件 A 发生变化时，首先通过上述\u003Cstrong>子组件向父组件传递参数\u003C/strong>的方式，完成子组件 A 的传递。然后通过\u003Cstrong>父组件向子组件传递参数\u003C/strong>的方式，完成父组件到子组件 B 的传递。从而实现子组件 A 到子组件 B 的参数传递。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Parent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Sender\u003C/span>\u003Cspan style=\"color:#B392F0\"> onSend\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{setData} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Receiver\u003C/span>\u003Cspan style=\"color:#B392F0\"> data\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{data} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"跨级组件\">跨级组件\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Context API\u003C/strong>：Context提供了一种在组件树中传递数据的方法，无需逐层传递 props。通过\u003Ccode>React.createContext()\u003C/code> 创建一个Context对象，在父组件中使用 Provider 提供数据，子组件中使用 Consumer 或 useContext Hook来获取数据。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Context创建\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> DataContext\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createContext\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">DataContext.Provider\u003C/span>\u003Cspan style=\"color:#B392F0\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{ data: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'全局数据'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">DeepComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">DataContext.Provider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 深层子组件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> DeepComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useContext\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(DataContext);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{data}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"非关系组件\">非关系组件\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>使用状态管理库（如Redux）\u003C/strong>：Redux等状态管理库提供了一个全局的状态存储，任何组件都可以通过连接到这个存储来读取和更新状态，从而实现组件间的通信。\u003C/li>\n\u003Cli>\u003Cstrong>状态管理库（Zustand）\u003C/strong>：基于 Hooks 的状态管理库，与 React 紧密集成。允许在组件中使用类似 useState 的 API 创建和管理状态。无需单独的 Store，每个状态都是独立的 Hook，管理更灵活\u003C/li>\n\u003Cli>\u003Cstrong>使用事件总线（Event Bus）\u003C/strong>：创建一个全局的事件中心，组件可以通过发布和订阅事件来进行通信。这种方法适用于组件之间关系复杂且不需要共享状态的场景。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"其他关系\">其他关系\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>使用refs\u003C/strong>：父组件可以通过refs直接访问子组件的实例，并调用其方法或访问其属性。这种方法通常用于需要直接控制子组件行为的场景。\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"astro-react-混合架构下的组件交互\">Astro-React 混合架构下的组件交互\u003C/h1>\n\u003Cp>回到我们的 Astro 的项目上来说，会稍微复杂一点。Astro 组件主要是静态的，它们是\u003Cstrong>纯 HTML、无需客户端运行\u003C/strong>的模板组件。这点非常重要，Astro 组件会在构建打包时直接构建为 HTML，不会在客户端进行渲染。这也是 Astro 快的原因。\u003C/p>\n\u003Cp>在这过程中，frontmatter 中编写的 js 代码只会在构建的时候执行一次，构建完成则不会保留。如果需要客户端执行 js 交互，可以通过\u003Ccode>&#x3C;script>&#x3C;/script>\u003C/code>来保留 js 代码或者通过\u003Ccode>client: load\u003C/code>激活别的 UI 框架组件，例如 react。\u003C/p>\n\u003Cp>所以如果在 Astro 组件中引入 React 组件时，除了在构建时，执行 frontmatter 中 js 可以完成一次从 Astro 组件到 React 组件的参数传递之外，在客户端上进行交互，可以通过以下的方式（我们以点击右面 tag 列表中的 tag，触发左面 blog 列表重新加载为例）：\u003C/p>\n\u003Ch2 id=\"react-组件封装\">React 组件封装\u003C/h2>\n\u003Cp>因为 Astro 组件在客户端是纯 Html 的状态。可以将所有具有交互功能的组件，都封装为 React 组件。 Astro 组件只用做页面布置，引入 React 组件。\u003Cstrong>注意 React 组件中不能引入 Astro 组件\u003C/strong>。\u003C/p>\n\u003Cul>\n\u003Cli>封装触发组件\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { useState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> TriggerComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Tech&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Design&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TriggerComp;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>定义响应组件\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React, { useEffect } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResponseComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">blogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setBlogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"blog1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"blog2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {blogs.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">blog\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{blog.id}>{blog.title}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ResponseComp;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"使用-zustand-全局状态管理推荐\">使用 Zustand 全局状态管理（推荐）\u003C/h2>\n\u003Cul>\n\u003Cli>安装 Zustand\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tnpm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> zustand\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>创建全局状态文件 \u003Ccode>src/stores/tagStore.ts\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">//创建全局状态文件 `src/stores/tagStore.ts`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { create } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'zustand'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> TagState\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  selectedTag\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  setSelectedTag\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">tag\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> useTagStore\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">TagState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>((\u003C/span>\u003Cspan style=\"color:#FFAB70\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  selectedTag: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'all'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  setSelectedTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">tag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ selectedTag: tag }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>修改触发组件\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { useTagStore } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../stores/tagStore'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> TriggerComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> setSelectedTag\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useTagStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state.setSelectedTag);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setSelectedTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'tech'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>Tech&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setSelectedTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'design'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>Design&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TriggerComp;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>修改响应组件\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { useEffect, useState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { useTagStore } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../stores/tagStore'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { fetchBlogsByTag } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../api'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// 假设有数据获取函数\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResponseComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> selectedTag\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useTagStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state.selectedTag);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">blogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setBlogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 根据标签获取数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    fetchBlogsByTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(selectedTag).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setBlogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [selectedTag]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {blogs.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">blog\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{blog.id}>{blog.title}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ResponseComp;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>在 Astro 页面中引入组件\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> BlogList \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../components/BlogList'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> BlogListTags \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../components/BlogListTags'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;!-- 启用客户端交互，实现TriggerComp数据传递到ResponseComp -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">TriggerComp\u003C/span>\u003Cspan style=\"color:#B392F0\"> client\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">ResponseComp\u003C/span>\u003Cspan style=\"color:#B392F0\"> client\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"使用自定义事件无需外部库\">使用自定义事件（无需外部库）：\u003C/h2>\n\u003Cul>\n\u003Cli>修改触发组件\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> TriggerComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleTagSelect\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">tag\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 通过浏览器原生事件系统实现组件通信。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 触发自定义事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> event\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> CustomEvent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'tagChange'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { detail: tag });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    window.\u003C/span>\u003Cspan style=\"color:#B392F0\">dispatchEvent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleTagSelect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'tech'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>Tech&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleTagSelect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'design'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>Design&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TriggerComp;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>修改响应组件\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { useEffect, useState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { fetchBlogsByTag } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../api'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResponseComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">blogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setBlogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">selectedTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setSelectedTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'all'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 监听自定义事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleTagChange\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> CustomEvent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      setSelectedTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e.detail);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    window.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'tagChange'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, handleTagChange);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'tagChange'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, handleTagChange);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, []);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 根据标签获取数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    fetchBlogsByTag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(selectedTag).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setBlogs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [selectedTag]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {blogs.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">blog\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{blog.id}>{blog.title}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ResponseComp;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>在 Astro 页面中引入组件（同上）\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> BlogList \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../components/BlogList'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> BlogListTags \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../components/BlogListTags'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">BlogListTags\u003C/span>\u003Cspan style=\"color:#B392F0\"> client\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">BlogList\u003C/span>\u003Cspan style=\"color:#B392F0\"> client\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":130,"localImagePaths":160,"remoteImagePaths":161,"frontmatter":113,"imagePaths":162},[131,134,137,140,142,144,146,148,151,154,157],{"depth":132,"slug":133,"text":133},1,"引子",{"depth":132,"slug":135,"text":136},"react架构下的组件交互","React架构下的组件交互",{"depth":138,"slug":139,"text":139},2,"父子组件",{"depth":138,"slug":141,"text":141},"兄弟组件",{"depth":138,"slug":143,"text":143},"跨级组件",{"depth":138,"slug":145,"text":145},"非关系组件",{"depth":138,"slug":147,"text":147},"其他关系",{"depth":132,"slug":149,"text":150},"astro-react-混合架构下的组件交互","Astro-React 混合架构下的组件交互",{"depth":138,"slug":152,"text":153},"react-组件封装","React 组件封装",{"depth":138,"slug":155,"text":156},"使用-zustand-全局状态管理推荐","使用 Zustand 全局状态管理（推荐）",{"depth":138,"slug":158,"text":159},"使用自定义事件无需外部库","使用自定义事件（无需外部库）：",[],[],[],"如何在 Astro 项目中进行 React 组件的通信.md","test-toc",{"id":164,"data":166,"body":174,"filePath":175,"digest":176,"rendered":177,"legacyId":251},{"title":167,"description":168,"pubDate":169,"heroImage":96,"tags":170},"目录功能测试文章","测试文章目录功能是否正常工作",["Date","2025-01-11T00:00:00.000Z"],[171,172,173],"test","toc","demo","# 一级标题：目录功能测试\n\n这是一个测试文章，用来验证目录功能是否正常工作。\n\n## 二级标题：功能特性\n\n目录功能应该能够：\n\n### 三级标题：自动生成\n\n- 自动提取文章中的所有标题\n- 支持 h1 到 h6 六个层级\n- 自动生成锚点链接\n\n### 三级标题：交互功能\n\n- 点击目录项可以跳转到对应位置\n- 滚动时自动高亮当前章节\n- 平滑滚动效果\n\n## 二级标题：样式设计\n\n### 三级标题：视觉效果\n\n目录采用现代化的设计风格：\n\n#### 四级标题：颜色搭配\n\n- 使用半透明背景\n- 毛玻璃效果\n- 优雅的阴影\n\n#### 四级标题：布局设计\n\n- 左侧固定定位\n- 响应式设计\n- 合理的间距\n\n### 三级标题：用户体验\n\n#### 四级标题：交互反馈\n\n- 悬停效果\n- 当前章节高亮\n- 平滑动画\n\n#### 四级标题：可访问性\n\n- 键盘导航支持\n- 屏幕阅读器友好\n- 语义化 HTML\n\n## 二级标题：技术实现\n\n### 三级标题：React 组件\n\n使用 React 实现目录组件：\n\n#### 四级标题：状态管理\n\n- 使用 useState 管理标题列表\n- 使用 useState 管理当前激活项\n- 使用 useEffect 处理副作用\n\n#### 四级标题：DOM 操作\n\n- 使用 querySelector 查找标题\n- 使用 IntersectionObserver 监听滚动\n- 使用 scrollIntoView 实现跳转\n\n### 三级标题：样式实现\n\n#### 四级标题：CSS 特性\n\n- 使用 CSS Grid 和 Flexbox 布局\n- 使用 CSS 变量管理颜色\n- 使用媒体查询实现响应式\n\n#### 四级标题：动画效果\n\n- 使用 CSS transition 实现平滑过渡\n- 使用 transform 实现变换效果\n- 使用 backdrop-filter 实现毛玻璃效果\n\n## 二级标题：总结\n\n这个目录功能实现了以下目标：\n\n### 三级标题：功能完整\n\n- ✅ 自动提取标题\n- ✅ 支持多级目录\n- ✅ 点击跳转功能\n- ✅ 滚动高亮功能\n\n### 三级标题：用户体验\n\n- ✅ 现代化设计\n- ✅ 响应式布局\n- ✅ 平滑动画\n- ✅ 良好的可访问性\n\n### 三级标题：技术实现\n\n- ✅ React 组件化\n- ✅ 客户端渲染\n- ✅ 性能优化\n- ✅ 代码可维护性\n\n这个目录功能现在已经完全实现并可以正常使用了！","src/content/blog/test-toc.md","6c9f6815975192b1",{"html":178,"metadata":179},"\u003Ch1 id=\"一级标题目录功能测试\">一级标题：目录功能测试\u003C/h1>\n\u003Cp>这是一个测试文章，用来验证目录功能是否正常工作。\u003C/p>\n\u003Ch2 id=\"二级标题功能特性\">二级标题：功能特性\u003C/h2>\n\u003Cp>目录功能应该能够：\u003C/p>\n\u003Ch3 id=\"三级标题自动生成\">三级标题：自动生成\u003C/h3>\n\u003Cul>\n\u003Cli>自动提取文章中的所有标题\u003C/li>\n\u003Cli>支持 h1 到 h6 六个层级\u003C/li>\n\u003Cli>自动生成锚点链接\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"三级标题交互功能\">三级标题：交互功能\u003C/h3>\n\u003Cul>\n\u003Cli>点击目录项可以跳转到对应位置\u003C/li>\n\u003Cli>滚动时自动高亮当前章节\u003C/li>\n\u003Cli>平滑滚动效果\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"二级标题样式设计\">二级标题：样式设计\u003C/h2>\n\u003Ch3 id=\"三级标题视觉效果\">三级标题：视觉效果\u003C/h3>\n\u003Cp>目录采用现代化的设计风格：\u003C/p>\n\u003Ch4 id=\"四级标题颜色搭配\">四级标题：颜色搭配\u003C/h4>\n\u003Cul>\n\u003Cli>使用半透明背景\u003C/li>\n\u003Cli>毛玻璃效果\u003C/li>\n\u003Cli>优雅的阴影\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"四级标题布局设计\">四级标题：布局设计\u003C/h4>\n\u003Cul>\n\u003Cli>左侧固定定位\u003C/li>\n\u003Cli>响应式设计\u003C/li>\n\u003Cli>合理的间距\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"三级标题用户体验\">三级标题：用户体验\u003C/h3>\n\u003Ch4 id=\"四级标题交互反馈\">四级标题：交互反馈\u003C/h4>\n\u003Cul>\n\u003Cli>悬停效果\u003C/li>\n\u003Cli>当前章节高亮\u003C/li>\n\u003Cli>平滑动画\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"四级标题可访问性\">四级标题：可访问性\u003C/h4>\n\u003Cul>\n\u003Cli>键盘导航支持\u003C/li>\n\u003Cli>屏幕阅读器友好\u003C/li>\n\u003Cli>语义化 HTML\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"二级标题技术实现\">二级标题：技术实现\u003C/h2>\n\u003Ch3 id=\"三级标题react-组件\">三级标题：React 组件\u003C/h3>\n\u003Cp>使用 React 实现目录组件：\u003C/p>\n\u003Ch4 id=\"四级标题状态管理\">四级标题：状态管理\u003C/h4>\n\u003Cul>\n\u003Cli>使用 useState 管理标题列表\u003C/li>\n\u003Cli>使用 useState 管理当前激活项\u003C/li>\n\u003Cli>使用 useEffect 处理副作用\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"四级标题dom-操作\">四级标题：DOM 操作\u003C/h4>\n\u003Cul>\n\u003Cli>使用 querySelector 查找标题\u003C/li>\n\u003Cli>使用 IntersectionObserver 监听滚动\u003C/li>\n\u003Cli>使用 scrollIntoView 实现跳转\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"三级标题样式实现\">三级标题：样式实现\u003C/h3>\n\u003Ch4 id=\"四级标题css-特性\">四级标题：CSS 特性\u003C/h4>\n\u003Cul>\n\u003Cli>使用 CSS Grid 和 Flexbox 布局\u003C/li>\n\u003Cli>使用 CSS 变量管理颜色\u003C/li>\n\u003Cli>使用媒体查询实现响应式\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"四级标题动画效果\">四级标题：动画效果\u003C/h4>\n\u003Cul>\n\u003Cli>使用 CSS transition 实现平滑过渡\u003C/li>\n\u003Cli>使用 transform 实现变换效果\u003C/li>\n\u003Cli>使用 backdrop-filter 实现毛玻璃效果\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"二级标题总结\">二级标题：总结\u003C/h2>\n\u003Cp>这个目录功能实现了以下目标：\u003C/p>\n\u003Ch3 id=\"三级标题功能完整\">三级标题：功能完整\u003C/h3>\n\u003Cul>\n\u003Cli>✅ 自动提取标题\u003C/li>\n\u003Cli>✅ 支持多级目录\u003C/li>\n\u003Cli>✅ 点击跳转功能\u003C/li>\n\u003Cli>✅ 滚动高亮功能\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"三级标题用户体验-1\">三级标题：用户体验\u003C/h3>\n\u003Cul>\n\u003Cli>✅ 现代化设计\u003C/li>\n\u003Cli>✅ 响应式布局\u003C/li>\n\u003Cli>✅ 平滑动画\u003C/li>\n\u003Cli>✅ 良好的可访问性\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"三级标题技术实现\">三级标题：技术实现\u003C/h3>\n\u003Cul>\n\u003Cli>✅ React 组件化\u003C/li>\n\u003Cli>✅ 客户端渲染\u003C/li>\n\u003Cli>✅ 性能优化\u003C/li>\n\u003Cli>✅ 代码可维护性\u003C/li>\n\u003C/ul>\n\u003Cp>这个目录功能现在已经完全实现并可以正常使用了！\u003C/p>",{"headings":180,"localImagePaths":248,"remoteImagePaths":249,"frontmatter":166,"imagePaths":250},[181,184,187,191,194,197,200,204,207,210,213,216,219,222,225,228,231,234,237,240,243,245],{"depth":132,"slug":182,"text":183},"一级标题目录功能测试","一级标题：目录功能测试",{"depth":138,"slug":185,"text":186},"二级标题功能特性","二级标题：功能特性",{"depth":188,"slug":189,"text":190},3,"三级标题自动生成","三级标题：自动生成",{"depth":188,"slug":192,"text":193},"三级标题交互功能","三级标题：交互功能",{"depth":138,"slug":195,"text":196},"二级标题样式设计","二级标题：样式设计",{"depth":188,"slug":198,"text":199},"三级标题视觉效果","三级标题：视觉效果",{"depth":201,"slug":202,"text":203},4,"四级标题颜色搭配","四级标题：颜色搭配",{"depth":201,"slug":205,"text":206},"四级标题布局设计","四级标题：布局设计",{"depth":188,"slug":208,"text":209},"三级标题用户体验","三级标题：用户体验",{"depth":201,"slug":211,"text":212},"四级标题交互反馈","四级标题：交互反馈",{"depth":201,"slug":214,"text":215},"四级标题可访问性","四级标题：可访问性",{"depth":138,"slug":217,"text":218},"二级标题技术实现","二级标题：技术实现",{"depth":188,"slug":220,"text":221},"三级标题react-组件","三级标题：React 组件",{"depth":201,"slug":223,"text":224},"四级标题状态管理","四级标题：状态管理",{"depth":201,"slug":226,"text":227},"四级标题dom-操作","四级标题：DOM 操作",{"depth":188,"slug":229,"text":230},"三级标题样式实现","三级标题：样式实现",{"depth":201,"slug":232,"text":233},"四级标题css-特性","四级标题：CSS 特性",{"depth":201,"slug":235,"text":236},"四级标题动画效果","四级标题：动画效果",{"depth":138,"slug":238,"text":239},"二级标题总结","二级标题：总结",{"depth":188,"slug":241,"text":242},"三级标题功能完整","三级标题：功能完整",{"depth":188,"slug":244,"text":209},"三级标题用户体验-1",{"depth":188,"slug":246,"text":247},"三级标题技术实现","三级标题：技术实现",[],[],[],"test-toc.md"]