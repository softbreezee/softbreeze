---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

// type Props = CollectionEntry<"blog">["data"];

// const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
const { frontmatter } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={frontmatter.title} description="" />
  </head>
  <body>
    <Header />
    <main>
      <article>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={frontmatter.pubDate} />
              {
                frontmatter.updatedDate && (
                  <div class="last-updated-on">
                    Last updated on{" "}<FormattedDate date={frontmatter.updatedDate} />
                  </div>
                )
              }
            </div>
            <h1 class="post-title">{frontmatter.title}</h1>
            <hr />
            <div class="tags">
              {
                frontmatter.tags?.map((tag: string) => (
                  <p class="tag">
                    <a href={`/tags/${tag}`}>{tag}</a>
                  </p>
                ))
              }
            </div>
          </div>
          <!-- slot 为 blog 内容 -->
          <slot />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>

<style>
  main {
    width: calc(100% - 2em);
    max-width: 100%;
    margin: 0;
  }
  .prose {
    width: 960px;
    max-width: calc(100% - 2em);
    margin: auto;
    padding: 1em;
    color: rgb(var(--gray-dark));
  }
  .date {
    margin-bottom: 0.5em;
    color: rgb(var(--gray));
  }
  .last-updated-on {
    font-style: italic;
  }
  .post-title {
    color: rgb(var(--black));
    font-size: 2.5rem;
    margin: 0.5em 0;
    padding-bottom: 0.25em;
    border-bottom: 2px solid rgb(var(--gray-light));
  }
  .tags {
    display: flex;
    flex-wrap: wrap;
    margin: 0.8rem;
  }
  .tag {
    margin: 0.2em;
    border: dotted 1px #a1a1a1;
    border-radius: 0.5em;
    padding: 0.2em 0.8em;
    font-size: 0.8em;
    background-color: #f8fcfd;
  }
  .tag:hover {
    box-shadow: var(--box-shadow);
  }
  .tag a {
    text-decoration: none;
    color: inherit;
  }
  /* Cycle through border colors (5 colors) */
  .tag:nth-child(5n + 1) {
    border: 2px solid #2337ff; /* Blue */
  }
  .tag:nth-child(5n + 2) {
    border: 2px solid #558b2f; /* Green */
  }
  .tag:nth-child(5n + 3) {
    border: 2px solid #ff9800; /* Orange */
  }
  .tag:nth-child(5n + 4) {
    border: 2px solid #e91e63; /* Pink */
  }
  .tag:nth-child(5n + 5) {
    border: 2px solid #9c27b0; /* Purple */
  }
  pre {
    background-color: #2d2d2d;
    color: #cccccc;
    padding: 1.5em;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5em 0;
  }
  pre > code {
    all: unset;
    font-family: 'Fira Code', monospace;
    font-size: 0.9em;
  }
  code {
    padding: 2px 5px;
    background-color: #f0f0f0;
    border-radius: 2px;
    font-family: 'Fira Code', monospace;
  }
</style>
