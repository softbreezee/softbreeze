---
import Greeting from "../components/Greeting";
import BaseLayout from "../layouts/BaseLayout.astro";

const pageTitle = "首页";
---

<BaseLayout pageTitle={pageTitle}>
  <section class="cyber-hero">
    <div class="neon-grid"></div>
    <h1 class="hacker-text">
      <span class="code-glitch">Code</span>Universe
    </h1>
    <p class="subtitle">探索前沿技术 | 分享开发心得</p>
  </section>

  <div class="game-panel">
    <canvas id="game-canvas" client:load></canvas>
    <div class="game-controls">
      <span>空格键开始</span>
      <span>↑ 控制飞行</span>
    </div>
  </div>

  <section class="latest-posts">
    <h2 class="neon-title">
      <span>📌 最新文章</span>
    </h2>
    <div class="post-cards">
      {/* 动态生成文章卡片 */}
    </div>
  </section>

  <style>
    .cyber-hero {
      position: relative;
      height: 70vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      background: linear-gradient(45deg, #0f0f0f 0%, #1a1a1a 100%);
      overflow: hidden;
    }

    .neon-grid {
      position: absolute;
      width: 200%;
      height: 200%;
      background: repeating-linear-gradient(
        90deg,
        rgba(0, 243, 255, 0.1) 0%,
        rgba(0, 243, 255, 0.1) 1%,
        transparent 1%,
        transparent 10%
      );
      animation: gridScroll 40s linear infinite;
    }

    .hacker-text {
      font-size: 4rem;
      color: #00f3ff;
      text-shadow: 0 0 10px rgba(0, 243, 255, 0.8);
      position: relative;
      z-index: 1;
    }

    .game-panel {
      background: rgba(0, 0, 0, 0.9);
      border: 2px solid #bc13fe;
      border-radius: 12px;
      padding: 1rem;
      margin: 2rem auto;
      max-width: 800px;
    }

    @keyframes gridScroll {
      0% { transform: translateX(-50%); }
      100% { transform: translateX(0%); }
    }
  </style>

  <script is:inline>
    class Game {
      constructor() {
        this.canvas = document.getElementById('game-canvas');
        this.ctx = this.canvas.getContext('2d');
        this.init();
      }

      init() {
        this.canvas.width = 800;
        this.canvas.height = 400;
        // 游戏初始化逻辑...
      }
    <Game>
      // 完整游戏逻辑实现
      handleInput(e) {
        if (e.code === 'Space') {
          this.birdVelocity = -8;
          createParticles(100, this.birdY);
        }
      }
    
      drawPipes() {
        this.pipes.forEach(pipe => {
          this.ctx.fillStyle = '#2ecc71';
          this.ctx.fillRect(pipe.x, 0, 60, pipe.top);
          this.ctx.fillRect(pipe.x, pipe.top + 150, 60, this.canvas.height);
        });
      }
    
      checkCollision(pipe) {
        return (
          (100 < pipe.x + 60 && 100 + 40 > pipe.x) &&
          (this.birdY < pipe.top || this.birdY + 30 > pipe.top + 150)
        );
      }
    </Game>
    
    // 集成博客列表
    <BlogList client:load posts={posts.slice(0, 3)} class="post-cards" />
      {posts.slice(0, 3).map(post => (
        <li class="post-card">
          <a href={`/blog/${post.slug}/`}>
            <h3>{post.title}</h3>
            <FormattedDate date={post.date} />
          </a>
        </li>
      ))}
    </BlogList>
    
    <style>
      .post-cards {
        display: grid;
        gap: 2rem;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      }
    
      .post-card {
        background: rgba(255,255,255,0.05);
        border: 1px solid var(--neon-blue);
        border-radius: 8px;
        padding: 1.5rem;
        transition: transform 0.3s ease;
      }
    
      .post-card:hover {
        transform: translateY(-5px);
      }
    </style>
      update() {
        this.ctx.fillStyle = '#0f0f1a';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // 小鸟物理引擎
        this.birdY += this.gravity;
        this.ctx.drawImage(birdImg, 100, this.birdY, 40, 30);
        
        // 管道生成逻辑
        if (this.frame % 150 === 0) {
          const gap = 150;
          const top = Math.random() * (this.canvas.height - gap - 100);
          this.pipes.push({ x: this.canvas.width, top, passed: false });
        }
        
        // 碰撞检测
        this.pipes.forEach(pipe => {
          if (this.checkCollision(pipe)) {
            this.gameOver = true;
          }
        });
      }
    </Game>
    window.addEventListener('load', () => new Game());
  </script>
</BaseLayout>
  <div class="home-container">
    <h1 class="main-title animated-title">探索技术世界</h1>
    <h2 class="subtitle">分享前沿技术与开发心得</h2>
    <Greeting client:load messages={["你好","欢迎","很高兴见到你","欢迎回来"]} />
    <div class="daily-quote">
      <h3>每日语录</h3>
      <p id="quote-text">正在加载每日语录...</p>
      <script is:inline>
        (async function() {
          try {
            const response = await fetch('a/b/c');
            if (response.ok) {
              const data = await response.json();
              const quote = data.quote || "成功不是将来才有的，而是从决定去做的那一刻起，持续累积而成。";
              document.getElementById('quote-text').textContent = quote;
            } else {
              document.getElementById('quote-text').textContent = 
                "成功不是将来才有的，而是从决定去做的那一刻起，持续累积而成。";
            }
          } catch (error) {
            document.getElementById('quote-text').textContent = 
              "成功不是将来才有的，而是从决定去做的那一刻起，持续累积而成。";
          }
        })();
      </script>
    </div>
  </div>
</BaseLayout>

<style>
  .home-container {
    text-align: center;
    padding: 2rem;
    max-width: 960px;
    margin: 0 auto;
  }
  .main-title {
    color: rgb(var(--black));
    font-size: 3rem;
    margin-bottom: 1rem;
    animation: fadeIn 1s ease-in-out;
  }
  .subtitle {
    color: rgb(var(--gray-dark));
    font-size: 1.8rem;
    margin-bottom: 2rem;
  }
  .daily-quote {
    background-color: rgba(var(--gray-light), 0.3);
    border-radius: 8px;
    padding: 1.5rem;
    margin-top: 2rem;
    box-shadow: var(--box-shadow);
    transition: all 0.3s ease;
  }
  .daily-quote:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(var(--black), 0.15);
  }
  .daily-quote h3 {
    color: var(--accent);
    margin-bottom: 1rem;
  }
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

// 添加粒子效果
const particles = [];
function createParticles(x, y) {
  for (let i = 0; i < 20; i++) {
    particles.push({
      x,
      y,
      vx: Math.random() * 4 - 2,
      vy: Math.random() * 4 - 2,
      life: 1
    });
  }
}
